function t_forms__onReady(e) {
    "loading" != document.readyState ? e() : document.addEventListener("DOMContentLoaded", e)
}

function t_ready(e) {
    "loading" != document.readyState ? e() : document.addEventListener ? document.addEventListener("DOMContentLoaded", e) : document.attachEvent("onreadystatechange", (function () {
        "loading" != document.readyState && e()
    }))
}

function t_removeEl(e) {
    e && e.parentNode && e.parentNode.removeChild(e)
}
window.t_form__browserLang = (window.navigator.userLanguage || window.navigator.language).toUpperCase().slice(0, 2), t_forms__onReady((function () {
        var e = document.getElementById("allrecords");
        if (e) {
            var t = e.getAttribute("data-tilda-project-lang");
            t && (window.t_form__browserLang = t)
        }
    })), Array.prototype.some || (Array.prototype.some = function (e) {
        "use strict";
        if (null == this) throw new TypeError("Array.prototype.some called on null or undefined");
        if ("function" != typeof e) throw new TypeError;
        for (var t = Object(this), r = t.length >>> 0, o = arguments.length >= 2 ? arguments[1] : void 0, a = 0; a < r; a++)
            if (a in t && e.call(o, t[a], a, t)) return !0;
        return !1
    }),
    function (e) {
        var t = e.matches || e.matchesSelector || e.webkitMatchesSelector || e.mozMatchesSelector || e.msMatchesSelector || e.oMatchesSelector;
        e.matches = e.matchesSelector = t || function e(t) {
            var e = document.querySelectorAll(t),
                r = this;
            return Array.prototype.some.call(e, (function (e) {
                return e === r
            }))
        }
    }(Element.prototype), Element.prototype.closest || (Element.prototype.closest = function (e) {
        for (var t = this; t && 1 === t.nodeType;) {
            if (Element.prototype.matches.call(t, e)) return t;
            t = t.parentElement || t.parentNode
        }
        return null
    }), String.prototype.trim || (String.prototype.trim = function () {
        return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "")
    }), Array.prototype.indexOf || (Array.prototype.indexOf = function (e, t) {
        "use strict";
        var r;
        if (null == this) throw new TypeError('"this" is null or not defined');
        var o = Object(this),
            a = o.length >>> 0;
        if (0 === a) return -1;
        var i = 0 | t;
        if (i >= a) return -1;
        for (r = Math.max(i >= 0 ? i : a - Math.abs(i), 0); r < a; r++)
            if (r in o && o[r] === e) return r;
        return -1
    });
var htmlEvents = {
    onblur: 1,
    onchange: 1,
    onfocus: 1,
    onsubmit: 1,
    onclick: 1,
    ondblclick: 1,
    onkeydown: 1,
    onkeypress: 1,
    onpaste: 1,
    oninput: 1
};

function t_triggerEvent(e, t) {
    var r;
    "function" == typeof window.CustomEvent ? r = new CustomEvent(t) : document.createEvent ? (r = document.createEvent("HTMLEvents")).initEvent(t, !0, !1) : document.createEventObject && ((r = document.createEventObject()).eventType = t), r.eventName = t, e.dispatchEvent ? e.dispatchEvent(r) : e.fireEvent && htmlEvents["on" + t] ? e.fireEvent("on" + r.eventType, r) : e[t] ? e[t]() : e["on" + t] && e["on" + t](), t_checkJqueryEvent(e, t)
}

function t_checkJqueryEvent(e, t) {
    var r = $._data(e, "events") || !1,
        o = $._data(document, "events") || !1,
        a = !1;
    if (r)
        for (var i in r)
            if (i === t) {
                $(e).trigger(t), a = !0;
                break
            } if (o && !a)
        for (var i in o)
            if (i === t) {
                $(document).trigger($.Event(t, {
                    target: e
                }));
                break
            }
}

function t_removeEventListener(e, t, r) {
    e.removeEventListener ? e.removeEventListener(t, r, !1) : e.detachEvent && htmlEvents["on" + t] ? e.detachEvent("on" + t, r) : e["on" + t] = null
}

function t_addEventListener(e, t, r, o) {
    e.addEventListener ? e.addEventListener(t, r, o) : e.attachEvent && htmlEvents["on" + t] ? e.attachEvent("on" + t, r) : e["on" + t] = r
}

function t_serializeArray(e) {
    for (var t = [], r = e.elements, o = 0; o < r.length; o++)
        if (!(!r[o].name || r[o].disabled || ["file", "reset", "submit", "button"].indexOf(r[o].type) > -1))
            if ("select-multiple" !== r[o].type)["checkbox", "radio"].indexOf(r[o].type) > -1 && !r[o].checked || t.push({
                name: r[o].name,
                value: r[o].value
            });
            else
                for (var a = r[o].options, i = 0; i < a.length; i++) a[i].selected && t.push({
                    name: a[i].name,
                    value: a[i].value
                });
    return t
}

function t_addClass(e, t) {
    document.body.classList ? e.classList.add(t) : e.className += (e.className ? " " : "") + t
}

function t_removeClass(e, t) {
    document.body.classList ? e.classList.remove(t) : e.className = e.className.replace(new RegExp("(^|\\s+)" + t + "(\\s+|$)"), " ").replace(/^\s+/, "").replace(/\s+$/, "")
}

function t_hasClass(e, t) {
    return document.body.classList ? e.classList.contains(t) : new RegExp("(\\s|^)" + t + "(\\s|$)").test(e.className)
}

function t_formData(e) {
    for (var t = "", r = 0; r < e.length; r++) "" !== t && (t += "&"), t += encodeURIComponent(e[r].name) + "=" + encodeURIComponent(e[r].value);
    return t.replace(/%20/g, "+")
}

function t_fadeOut(e) {
    if ("none" !== e.style.display) var t = 1,
        r = setInterval((function () {
            e.style.opacity = t, (t -= .1) <= .1 && (clearInterval(r), e.style.display = "none", e.style.opacity = null)
        }), 30)
}

function t_fadeIn(e) {
    if ("block" !== e.style.display) {
        var t = 0;
        e.style.opacity = t, e.style.display = "block";
        var r = setInterval((function () {
            e.style.opacity = t, (t += .1) >= 1 && clearInterval(r)
        }), 30)
    }
}

function t_isEmptyObject(e) {
    for (var t in e)
        if (Object.prototype.hasOwnProperty.call(e, t)) return !1;
    return !0
}

function t_parseScripts(e, t) {
    for (var r = e.querySelectorAll(t + "script"), o = 0; o < r.length; o++) {
        for (var a = r[o], i = document.createElement("script"), n = 0; n < a.attributes.length; n++) {
            var s = a.attributes[n];
            i.setAttribute(s.name, s.value)
        }
        if (0 === a.innerHTML.length) {
            var l = document.createElement("script");
            l.src = a.attributes.src.value, e.appendChild(l), t_removeEl(a)
        } else i.appendChild(document.createTextNode(a.innerHTML)), a.parentNode.replaceChild(i, a)
    }
}

function t_form_dict(e) {
    var t = [];
    t.success = {
        EN: "Thank you! Your data has been submitted.",
        RU: "Спасибо! Данные успешно отправлены.",
        FR: "Merci! Vos données ont été soumises.",
        DE: "Vielen Dank! Ihre Daten wurden vorgelegt.",
        ES: "¡Gracias! Sus datos se han presentado.",
        PT: "Obrigada! Seus dados foram submetidos.",
        UK: "Дякую! Дані успішно відправлені.",
        JA: "ありがとうございました！あなたのデータが送信されました。",
        ZH: "谢谢！您的数据已提交。",
        PL: "Dziękuję! Dane wysłane pomyślnie.",
        KK: "Рақмет сізге! Сіздің деректер ұсынылған болатын.",
        IT: "Grazie! I suoi dati è stata presentata.",
        LV: "Paldies! ir iesniegts jūsu dati."
    }, t.successorder = {
        EN: "Thank you! Order created. Please wait while you are redirected to the payment page...",
        RU: "Спасибо! Заказ оформлен. Пожалуйста, подождите. Идет переход к оплате...",
        FR: "Merci! Ordre créé. S'il vous plaît, attendez. Nous allons le paiement...",
        DE: "Vielen Dank für Ihre Bestellung, Sie werden jetzt zum Bezahlvorgang weitergeleitet...",
        ES: "¡Gracias! Orden creado. Espere por favor. Vamos al pago ...",
        PT: "Obrigada! Pedido criado. Por favor, aguarde. Estamos indo para o pagamento ...",
        UK: "Дякую! Замовлення оформлене. Будь ласка зачекайте. Йде перехід до оплати...",
        JA: "ありがとうございました！注文が作成しました。お待ちください。私達は支払しようとしています...",
        ZH: "谢谢！为了创建。请稍等。我们要支付...",
        PL: "Dziękuję! Twoje zamówienie potwierdzono. Proszę czekać. Przechodzimy do płatności...",
        KK: "Рақмет сізге! Тапсырыс беру құрылған. Өтінемін күте тұрыңыз. Біз төлеу барамыз...",
        IT: "Grazie! Ordine creato. Attendere prego. Stiamo per il pagamento...",
        LV: "Paldies! Pasūtījums ir izveidots. Lūdzu uzgaidiet. Mēs gatavojamies maksājumu ..."
    }, t.email = {
        EN: "Please enter a valid email address",
        RU: "Укажите, пожалуйста, корректный email",
        FR: "S'il vous plaît mettre un bon e-mail",
        DE: "Bitte legen Sie eine korrekte e-mail",
        ES: "Por favor, ponga un correo electrónico correcta",
        PT: "Por favor, coloque um e-mail correto",
        UK: "Вкажіть, будь ласка, коректний email",
        JA: "正しい電子メールを入れてください",
        ZH: "请把正确的电子邮件",
        PL: "Wpisz poprawny email",
        KK: "дұрыс электрондық пошта қоюға сұраймыз",
        IT: "Si prega di inserire una corretta e-mail",
        LV: "Lūdzu, ielieciet pareizo e-pastu"
    }, t.url = {
        EN: "Please put a correct URL",
        RU: "Укажите, пожалуйста, корректный URL",
        FR: "S'il vous plaît mettre une URL correcte",
        DE: "Bitte legen Sie eine korrekte URL",
        ES: "Por favor, ponga una URL correcta",
        PT: "Por favor, coloque a URL correta",
        UK: "Вкажіть, будь ласка, коректний URL",
        JA: "正しいURLを入れてください",
        ZH: "请把正确的URL",
        PL: "Wpisz poprawny URL",
        KK: "Дұрыс URL қоюға сұраймыз",
        IT: "Si prega di inserire un URL corretto",
        LV: "Lūdzu, ielieciet pareizo URL"
    }, t.phone = {
        EN: "Please put a correct phone number",
        RU: "Укажите, пожалуйста, корректный номер телефона",
        FR: "S'il vous plaît mettre un bon numéro de téléphone",
        DE: "Bitte legen Sie eine korrekte Telefonnummer",
        ES: "Por favor, ponga un número de teléfono correcto",
        PT: "Por favor, coloque um número de telefone correto",
        UK: "Вкажіть, будь ласка, коректний номер телефону",
        JA: "正しい電話番号を入れてください",
        ZH: "请把正确的电话号码",
        PL: "Wpisz poprawny nr telefonu",
        KK: "Дұрыс телефон нөмірін қоюға сұраймыз",
        IT: "Si prega di inserire un numero di telefono corretto",
        LV: "Lūdzu, ielieciet pareizo tālruņa numuru"
    }, t.number = {
        EN: "Please put a correct number",
        RU: "Укажите, пожалуйста, корректный номер",
        FR: "S'il vous plaît mettre un nombre correct",
        DE: "Bitte legen Sie eine richtige Nummer",
        ES: "Por favor, ponga un número correcto",
        PT: "Por favor, coloque um número correto",
        UK: "Вкажіть, будь ласка, коректний номер",
        JA: "正しい番号を入れてください",
        ZH: "请把正确数量",
        PL: "Wpisz poprawny numer",
        KK: "Дұрыс бірқатар қоюға сұраймыз",
        IT: "Si prega di inserire un numero corretto",
        LV: "Lūdzu, ielieciet pareizo numuru"
    }, t.date = {
        EN: "Please put a correct date",
        RU: "Укажите, пожалуйста, корректную дату",
        FR: "S'il vous plaît mettre une date correcte",
        DE: "Bitte legen Sie ein korrektes Datum",
        ES: "Por favor, ponga una fecha correcta",
        PT: "Por favor, coloque uma data correta",
        UK: "Вкажіть, будь ласка, коректну дату",
        JA: "正しい日付を入れてください",
        ZH: "请把正确的日期",
        PL: "Wpisz poprawną datę",
        KK: "Дұрыс күнді қоюға сұраймыз",
        IT: "Si prega di inserire una data corretta",
        LV: "Lūdzu, ielieciet pareizo datumu"
    }, t.time = {
        EN: "Please put a correct time (HH:mm)",
        RU: "Укажите, пожалуйста, корректное время (ЧЧ:ММ)",
        FR: "S'il vous plaît mettre un heure (HH:mm)",
        DE: "Bitte legen Sie eine korrekte Zeit (HH:mm)",
        ES: "Por favor, ponga una hora correcta (HH:MM)",
        PT: "Por favor, coloque a hora correcta (HH:mm)",
        UK: "Вкажіть, будь ласка, коректний час (ГГ:ХХ)",
        JA: "正しい時刻（HH：mm）を入れてください",
        ZH: "请把正确的时间（HH：MM）",
        PL: "Wpisz poprawną godzinę (god:min)",
        KK: "Дұрыс уақыт (HH: мм) салып сұраймыз",
        IT: "Si prega di inserire un tempo corretto (hh:mm)",
        LV: "Lūdzu, ielieciet pareizo laiku (HH:mm)"
    }, t.name = {
        EN: "Please put a name",
        RU: "Укажите, пожалуйста, имя",
        FR: "S'il vous plaît mettre un nom",
        DE: "Bitte legen Sie einen Namen",
        ES: "Por favor, ponga un nombre",
        PT: "Por favor, coloque um nome",
        UK: "Вкажіть, будь ласка, ім'я",
        JA: "名前を入れてください",
        ZH: "请把姓名",
        PL: "Wpisz pełne imię",
        KK: "Атын қоюға сұраймыз",
        IT: "Si prega di inserire un nome",
        LV: "Lūdzu ielieciet vārdu"
    }, t.namerus = {
        EN: "Please put a correct name (only cyrillic letters)",
        RU: "Укажите, пожалуйста, имя (только кириллица)",
        FR: "S'il vous plaît mettre un nom correct (seulement lettres cyrilliques)",
        DE: "Bitte legen Sie einen richtigen Namen (nur kyrillische Buchstaben)",
        ES: "Por favor, ponga un nombre correcto (sólo letras cirílico)",
        PT: "Por favor, coloque um nome correto (somente letras em cirílico)",
        UK: "Вкажіть, будь ласка, ім'я (тільки кирилиця)",
        JA: "正しい名前（だけキリル文字）を入れてください",
        ZH: "请把正确的名称（仅西里尔字母）",
        PL: "Wpisz imię",
        KK: "Дұрыс атауын (тек кирилл әріптері) салып сұраймыз",
        IT: "Si prega di inserire un nome corretto (solo caratteri cirillici)",
        LV: "Lūdzu, ielieciet pareizo nosaukumu (tikai kirilicas burti)"
    }, t.nameeng = {
        EN: "Please put a correct name (only latin letters)",
        RU: "Укажите, пожалуйста, имя (только латиница)",
        FR: "S'il vous plaît mettre un nom correct (seulement lettres latines)",
        DE: "Bitte legen Sie einen richtigen Namen (nur lateinische Buchstaben)",
        ES: "Por favor, ponga un nombre correcto (sólo letras latinas)",
        PT: "Por favor, coloque um nome correto (somente letras latinas)",
        UK: "Вкажіть, будь ласка, ім'я (тільки латиниця)",
        JA: "正しい名前（のみラテン文字）を入れてください",
        ZH: "请把正确的名称（仅限拉丁字母）",
        PL: "Wpisz imię",
        KK: "дұрыс атауын (тек латын әріптері) салып сұраймыз",
        IT: "Si prega di inserire un nome corretto (solo lettere latine)",
        LV: "Lūdzu, ielieciet pareizo nosaukumu (tikai latīņu burtiem)"
    }, t.string = {
        EN: "You put incorrect symbols. Only letters, numbers and punctuation symbols are allowed",
        RU: "Вы написали некорректные символы. Разрешены только буквы, числа и знаки пунктуации",
        FR: "Vous mettez des symboles incorrects. Seules les lettres, chiffres et signes de ponctuation sont autorisés",
        DE: "Sie setzen falsche Symbole. Nur Buchstaben, Zahlen und Satzzeichen sind erlaubt",
        ES: "Pones símbolos incorrectos. Sólo letras, números y signos de puntuación están permitidos",
        PT: "Você coloca símbolos incorretos. Somente letras, números e sinais de pontuação são permitidos",
        UK: "Ви написали некоректні символи. Дозволені лише літери, числа і знаки пунктуації",
        JA: "あなたは間違ったシンボルを置きます。唯一の文字、数字、句読点記号が許可されています",
        ZH: "你把不正确的符号。只有字母，数字和标点符号被允许",
        PL: "Wpisane niepoprawne symbole, akceptowane litery, cyfry i znaki interpunkcyjne",
        KK: "Сіз дұрыс қоюға рәміздер. Тек әріптер, сандар және пунктуация рәміздер рұқсат етілген",
        IT: "Hai messo i simboli non corretti. Solo lettere, numeri e simboli di punteggiatura sono permessi",
        LV: "Jūs nodot nepareizu simbolus. Tikai burtus, ciparus un pieturzīmes simboli ir atļauts"
    }, t.req = {
        EN: "Please fill out all required fields",
        RU: "Пожалуйста, заполните все обязательные поля",
        FR: "S'il-vous-plaît remplissez tous les champs requis",
        DE: "Bitte füllen Sie alle erforderlichen Felder aus",
        ES: "Por favor llene todos los campos requeridos",
        PT: "Por favor preencha todos os campos requeridos",
        UK: "Будь ласка, заповніть всі обов'язкові поля",
        JA: "すべての必須項目を記入してください。",
        ZH: "请填写所有必填字段",
        PL: "Proszę wypełnić wszystkie pola",
        KK: "Барлық қажетті өрістерді толтырыңыз",
        IT: "Si prega di compilare tutti i campi richiesti",
        LV: "Lūdzu, aizpildiet visus nepieciešamos laukus"
    }, t.reqfield = {
        EN: "Required field",
        RU: "Обязательное поле",
        FR: "champs requis",
        DE: "Pflichtfeld",
        ES: "Campo requerido",
        PT: "Campo obrigatório",
        UK: "Обов'язкове поле",
        JA: "必須入力フィールド",
        ZH: "必填项目",
        PL: "Pole obowiązkowe",
        KK: "Міндетті өріс",
        IT: "Campo obbligatorio",
        LV: "Obligāts lauks"
    }, t.minlength = {
        EN: "Value is too short",
        RU: "Слишком короткое значение",
        FR: "La valeur est trop courte",
        DE: "Der Wert ist zu kurz",
        ES: "El valor es demasiado corta",
        PT: "O valor é muito curto",
        UK: "Занадто коротке значення",
        JA: "値が短すぎます",
        ZH: "值太短",
        PL: "Za krótko",
        KK: "Мән тым қысқа",
        IT: "Il valore è troppo breve",
        LV: "Vērtība ir pārāk īss"
    }, t.maxlength = {
        EN: "Value too big",
        RU: "Слишком длинное",
        FR: "Valeur trop",
        DE: "Wert zu groß",
        ES: "Valor demasiado grande",
        PT: "Valor muito grande",
        UK: "Занадто довге",
        JA: "値が大きすぎます",
        ZH: "值过大",
        PL: "Zbyt długie",
        KK: "Шамасы тым үлкен",
        IT: "Valore troppo grande",
        LV: "Vērtība ir pārāk liela"
    }, t.emptyfill = {
        EN: "None of the fields are filled in",
        RU: "Ни одно поле не заполнено",
        FR: "Aucun des champs sont remplis",
        DE: "Keines der Felder sind ausgefüllt",
        ES: "Ninguno de los campos se rellenan",
        PT: "Nenhum dos campos estão preenchidos",
        UK: "Жодне поле не заповнено",
        JA: "フィールドのどれもに充填されていません",
        ZH: "该字段均填写",
        PL: "Żadne pole nie jest wypełnione",
        KK: "Кен ешқайсысы толтырылады",
        IT: "Nessuno dei campi sono riempiti in",
        LV: "Neviens no laukiem ir aizpildīts"
    }, t.chosevalue = {
        EN: "Please select an address from the options",
        RU: "Пожалуйста, выберите адрес из предложенных вариантов",
        FR: "S'il vous plaît sélectionner une adresse parmi les options",
        DE: "Bitte wählen Sie eine Adresse aus den Optionen",
        ES: "Por favor, seleccione una dirección de una de las opciones",
        PT: "Por favor seleccione um endereço entre as opções",
        UK: "Будь ласка, виберіть адресу із запропонованих варіантів",
        JA: "オプションからアドレスを選択してください",
        ZH: "请从选择的地址",
        PL: "Proszę wybrać adres wśród oferowanych opcji",
        KK: "Параметрлерден мекенжайды таңдаңыз",
        IT: "Si prega di selezionare un indirizzo tra le opzioni",
        LV: "Lūdzu, izvēlieties adresi no iespējām"
    }, t.deliveryreq = {
        EN: "It is not possible to place an order without delivery. Please refresh the page and try again",
        RU: "Невозможно оформить заказ без доставки. Пожалуйста, перезагрузите страницу и попробуйте еще раз.",
        FR: "Il est impossible de passer une commande sans livraison. S'il vous plaît rafraîchir la page et réessayer",
        DE: "Es ist nicht möglich, eine Bestellung ohne Lieferung zu platzieren. Bitte aktualisieren Sie die Seite und versuchen Sie es erneut",
        ES: "No es posible colocar una orden sin entrega. Por favor, actualice la página y vuelva a intentarlo",
        PT: "Não é possível colocar uma ordem sem entrega. Por favor, atualize a página e tente novamente",
        UK: "Неможливо оформити замовлення без доставки. Будь ласка, перезавантажте сторінку і спробуйте ще раз.",
        JA: "配達せずに注文することはできません。ページを更新して、もう一度お試しください",
        ZH: "这是不可能发出订单交货没有。请刷新页面，然后再试一次",
        PL: "Nie jest możliwe, aby złożyć zamówienie bez dostawy. Odśwież stronę i spróbuj ponownie",
        KK: "Ол жеткізу жоқ тапсырысты орналастыру мүмкін емес. Бетті жаңартып, қайталап көріңіз",
        IT: "Non è possibile effettuare un ordine senza la consegna. perfavore ricarica la pagina e riprova",
        LV: "Tas nav iespējams veikt pasūtījumu bez piegādes. Lūdzu, atsvaidziniet lapu un mēģiniet vēlreiz"
    }, t.promocode = {
        EN: "Please activate promo code or clear input field",
        RU: "Активируйте, пожалуйста промокод или очистите поле",
        FR: "Veuillez activer le code promotionnel ou nettoyer le champ",
        DE: "Aktivieren Sie bitte den Aktionscode oder löschen Sie das Feld",
        ES: "Active, por favor el código promocional o limpie el campo",
        PT: "Ative, por favor o código promocional ou limpe o campo",
        UK: "Активуйте, будь ласка промокод або очистіть поле",
        JA: "プロモーションコードを有効にするか、フィールドをクリアしてください",
        ZH: "请激活促销代码或清除字段",
        PL: "Aktywuj kod promocyjny lub wyczyść pole",
        KK: "Промокодты іске қосыңыз немесе өрісті тазалаңыз",
        IT: "Si prega di attivare il codice promozionale o cancellare il campo",
        LV: "Ieslēdziet, lūdzu akcijas kodu vai notīriet lauku"
    };
    var r = window.t_form__browserLang;
    return t[e] ? t[e][r] ? t[e][r] : t[e].EN : ""
}! function () {
    window.scriptSysPayment = {}, window.handlerSysPayment = {}, window.isInitEventsZB = {}, window.isInitEventsCustomMask = {}, window.initForms = {}, window.tildaForm = {
        versionLib: "02.001",
        endpoint: "forms.tildacdn.com",
        isRecaptchaScriptInit: !1,
        currentFormProccessing: !1
    }, t_ready((function () {
        function checkVerifyTildaCaptcha(e) {
            if (-1 !== (e = e || window.event).origin.indexOf(window.tildaForm.endpoint)) {
                var t = document.getElementById("js-tildaspec-captcha"),
                    r = document.getElementById("tildaformcaptchabox");
                if ("closeiframe" == e.data) return r && t_removeEl(r), void(t && t_removeEl(t));
                var o = e.data;
                if (t) {
                    t.value = o, r && t_removeEl(r);
                    var a = t.closest("form");
                    a && t_forms__submitEvent(a)
                }
            }
        }

        function t_forms__addGRecaptcha() {
            for (var e = document.querySelectorAll(".js-tilda-captcha"), t = 0; t < e.length; t++) {
                var r = e[t].getAttribute("data-tilda-captchakey");
                if (r) {
                    var o = e[t].getAttribute("id");
                    if (!1 === window.tildaForm.isRecaptchaScriptInit) {
                        var a = document.head,
                            i = document.createElement("script");
                        window.tildaForm.isRecaptchaScriptInit = !0, i.type = "text/javascript", i.src = "../https@www.google.com/recaptcha/api.js@render=explicit", i.async = !0, a.appendChild(i), a.insertAdjacentHTML("beforeend", '<style type="text/css">.js-send-form-success .grecaptcha-badge {display: none;}</style>')
                    }
                    document.getElementById(o + "recaptcha") || e[t].insertAdjacentHTML("beforeend", '<div id="' + o + 'recaptcha" class="g-recaptcha" data-sitekey="' + r + '" data-callback="window.tildaForm.captchaCallback" data-size="invisible"></div>')
                } else t_removeClass(e[t], "js-tilda-captcha")
            }
        }

        function t_forms__initForms() {
            for (var e = document.querySelectorAll(".r"), t = 0; t < e.length; t++) {
                var r, o = e[t].id;
                window.initForms[o] || (t_forms__initEventPlaceholder(e[t]), t_forms__addInputItsGood(e[t]), t_forms__addAttrAction(e[t]), t_forms__onSubmit(e[t]), t_forms__onClick(e[t]), t_forms__onRender(e[t]), window.initForms[o] = !0)
            }
        }

        function t_forms__initEventPlaceholder(e) {
            var t = {},
                r = "focus",
                o = "blur";

            function a(e) {
                var r = (e = e || window.event).target || e.srcElement;
                if ("INPUT" === r.tagName) {
                    var o = r.closest("[data-input-lid]"),
                        a = r.getAttribute("placeholder"),
                        i = 0;
                    if (o) i = o.getAttribute("data-input-lid");
                    else {
                        var n = r.closest("form");
                        n && (i = n.getAttribute("data-input-lid"))
                    }
                    a && (t[i] = a, r.setAttribute("placeholder", ""))
                }
            }

            function i(e) {
                var r = (e = e || window.event).target || e.srcElement,
                    o = r.closest("[data-input-lid]"),
                    a = 0;
                if (o) a = o.getAttribute("data-input-lid");
                else {
                    var i = r.closest("form");
                    i && (a = i.getAttribute("data-input-lid"))
                }
                var s = n(a);
                s && (r.setAttribute("placeholder", s), t[a] = "")
            }

            function n(e) {
                return t[e] ? t[e] : ""
            }
            document.addEventListener || (r = "focusin", o = "focusout"), t_removeEventListener(e, r, a), t_addEventListener(e, r, a, !0), t_removeEventListener(e, o, i), t_addEventListener(e, o, i, !0)
        }

        function t_forms__addInputItsGood(e) {
            for (var t = e.querySelectorAll(".js-form-proccess[data-formactiontype]"), r = 0; r < t.length; r++) {
                var o = t[r],
                    a = o.getAttribute("data-formactiontype"),
                    i = o.querySelector('input[name="form-spec-comments"]');
                "1" === a || i || o.insertAdjacentHTML("beforeend", '<div style="position: absolute; left: -5000px; bottom: 0; display: none;"><input type="text" name="form-spec-comments" value="Its good" class="js-form-spec-comments" tabindex="-1" /></div>')
            }
        }

        function t_forms__addAttrAction(e) {
            for (var t = e.querySelectorAll(".js-form-procces"), r = 0; r < t.length; r++) {
                var o = t[r],
                    a;
                "2" === o.getAttribute("data-formactiontype") && o.setAttribute("action", "#")
            }
        }

        function t_forms__onRender(e) {
            var t;
            "396" === e.getAttribute("data-record-type") && ($(e).off("render"), $(e).on("render", t_forms__renderEvent))
        }

        function t_forms__renderEvent() {
            t_forms__onSubmit(this)
        }

        function t_forms__onSubmit(e) {
            for (var t = e.querySelectorAll(".js-form-proccess"), r = 0; r < t.length; r++) t_removeEventListener(t[r], "submit", t_forms__submitEvent), t_addEventListener(t[r], "submit", t_forms__submitEvent)
        }

        function t_forms__submitEvent(e) {
            var t = e;
            if (e.target && (t = e.target), t) {
                var r = t.querySelector('[type="submit"]'),
                    o = "";
                r && r.tildaSendingStatus && (o = r.tildaSendingStatus), o && "3" === o ? r.tildaSendingStatus = "" : (r && !t_hasClass(r, "t706__submit_disable") && r.click(), e.preventDefault ? e.preventDefault() : e.returnValue && (e.returnValue = !1))
            }
        }

        function t_forms__onClick(e) {
            t_addEventListener(e, "dblclick", t_forms__initBtnDblClick), t_removeEventListener(e, "click", t_forms__initBtnClick), t_addEventListener(e, "click", t_forms__initBtnClick)
        }

        function t_forms__initBtnClick(e) {
            var t = (e = e || window.event).target || e.srcElement,
                r = !!t.closest('[type="submit"]') && t;
            if (r) {
                var o = r.closest(".js-form-proccess");
                if (o) {
                    e.preventDefault ? e.preventDefault() : e.returnValue = !1;
                    var a = o.getAttribute("id"),
                        i = [],
                        n = "";
                    if (r.tildaSendingStatus && (n = r.tildaSendingStatus), !(n && n >= 1 || t_hasClass(r, "t706__submit_disable"))) {
                        if (t_addClass(r, "t-btn_sending"), r.tildaSendingStatus = "1", window.tildaForm.hideErrors(o), i = window.tildaForm.validate(o), window.tildaForm.showErrors(o, i)) return t_removeClass(r, "t-btn_sending"), void(r.tildaSendingStatus = "0");
                        var s, l = document.getElementById("allrecords").getAttribute("data-tilda-formskey"),
                            d = parseInt(o.getAttribute("data-formactiontype")),
                            c;
                        if (0 === o.querySelectorAll(".js-formaction-services").length && 1 !== d && !l) {
                            var u = o.querySelectorAll(".js-errorbox-all");
                            u && 0 !== u.length || (o.insertAdjacentHTML("afterbegin", '<div class="js-errorbox-all"></div>'), u.querySelectorAll(".js-errorbox-all"));
                            var m = o.querySelectorAll(".js-errorbox-all .js-rule-error-all");
                            if (!m || 0 === m.length) {
                                for (var p = 0; p < u.length; p++) u[p].insertAdjacentHTML("beforeend", '<p class="js-rule-error-all"></p>');
                                m = o.querySelectorAll(".js-errorbox-all .js-rule-error-all")
                            }
                            for (var p = 0; p < m.length; p++) m[p].innerHTML = "Please set receiver in block with forms", m[p].style.display = "block";
                            for (var p = 0; p < u.length; p++) u[p].style.display = "block";
                            return t_addClass(o, "js-send-form-error"), t_removeClass(r, "t-btn_sending"), r.tildaSendingStatus = "0", void t_triggerEvent(o, "tildaform:aftererror")
                        }
                        if (o.querySelector(".g-recaptcha") && grecaptcha) {
                            window.tildaForm.currentFormProccessing = {
                                form: o,
                                btn: r,
                                formtype: d,
                                formskey: l
                            };
                            var f = o.tildaCaptchaClientId;
                            if (f) grecaptcha.reset(f);
                            else {
                                var w = {
                                    size: "invisible",
                                    sitekey: o.getAttribute("data-tilda-captchakey"),
                                    callback: window.tildaForm.captchaCallback
                                };
                                f = grecaptcha.render(a + "recaptcha", w), o.tildaCaptchaClientId = f
                            }
                            grecaptcha.execute(f)
                        } else window.tildaForm.send(o, r, d, l)
                    }
                }
            }
        }

        function t_forms__initBtnDblClick(e) {
            var t = (e = e || window.event).target || e.srcElement,
                r;
            if (!!t.closest('[type="submit"]') && t) return e.preventDefault ? e.preventDefault() : e.returnValue = !1, !1
        }
        window.tildaForm.captchaCallback = function () {
            if (!window.tildaForm.currentFormProccessing || !window.tildaForm.currentFormProccessing.form) return !1;
            window.tildaForm.send(window.tildaForm.currentFormProccessing.form, window.tildaForm.currentFormProccessing.btn, window.tildaForm.currentFormProccessing.formtype, window.tildaForm.currentFormProccessing.formskey), window.tildaForm.currentFormProccessing = !1
        }, window.tildaForm.validate = function (e) {
            e instanceof Element || (e = e[0]);
            for (var t = e.querySelectorAll(".js-tilda-rule"), r = [], o = !0, a = 0; a < t.length; a++) {
                var i = t[a],
                    n = i.getAttribute("data-tilda-req") || 0,
                    s = i.getAttribute("data-tilda-rule") || "none",
                    l = "",
                    d = "",
                    c = i.getAttribute("data-tilda-rule-minlength") || 0,
                    u = i.getAttribute("data-tilda-rule-maxlength") || 0,
                    m = {},
                    p = i.value,
                    f = "",
                    w = i.getAttribute("type"),
                    y = i.getAttribute("name"),
                    v = e.getAttribute("data-formcart");
                if (m.obj = i, m.type = [], p && p.length > 0 && (f = p.replace(/[\s\u0000—\u001F\u2000-\u200F\uFEFF\u2028-\u202F\u205F-\u206F]/gi, ""), p = p.trim()), p.length > 0 && (o = !1), c && (c = parseInt(c)), u && (u = parseInt(u)), "1" === n && (0 === p.length && 0 === f.length || ("checkbox" === w || "radio" === w) && 0 === e.querySelectorAll('[name="' + y + '"]:checked').length)) m.type.push("req");
                else {
                    switch (s) {
                        case "email":
                            l = /^(?!\.)(?!.*\.\.)[a-zA-Zёа-яЁА-Я0-9\u2E80-\u2FD5\u3190-\u319f\u3400-\u4DBF\u4E00-\u9FCC\uF900-\uFAAD_\.\-\+]{0,63}[a-zA-Zёа-яЁА-Я0-9\u2E80-\u2FD5\u3190-\u319f\u3400-\u4DBF\u4E00-\u9FCC\uF900-\uFAAD_\-\+]@[a-zA-Zёа-яЁА-ЯЁёäöüÄÖÜßèéû0-9][a-zA-Zёа-яЁА-ЯЁёäöüÄÖÜßèéû0-9\.\-]{0,253}\.[a-zA-Zёа-яЁА-Я]{2,10}$/gi, p.length > 0 && !p.match(l) && m.type.push("email");
                            break;
                        case "url":
                            l = /^((https?|ftp):\/\/)?[a-zA-Zёа-яЁА-ЯЁёäöüÄÖÜßèéûşç0-9][a-zA-Zёа-яЁА-ЯЁёäöüÄÖÜßèéûşç0-9_\.\-]{0,253}\.[a-zA-Zёа-яЁА-Я]{2,10}\/?$/gi, p.length > 0 && ((d = (d = (d = p.split("//")) && d.length > 1 ? d[1] : d[0]).split("/")) && d.length > 0 && d[0] > "" ? (d = d[0]).match(l) || m.type.push("url") : (d && "" != d[0] || m.type.push("url"), d = ""));
                            break;
                        case "phone":
                            var g = i.getAttribute("data-tilda-mask"),
                                h = "^[0-9()+-";
                            g && (g.indexOf("*") > 0 ? h += "a-zёа-я" : (g.indexOf("a") > 0 && (h += "a-z"), g.indexOf("а") > 0 && (h += "а-яё"))), h += "]+$", l = new RegExp(h, "gi"), f.length > 0 && !f.match(l) ? m.type.push("phone") : (1 == (d = f.replace(/[^0-9]+/g, "")).indexOf("000") || 1 == d.indexOf("111") || 1 == d.indexOf("222") && "5" != d.substring(0, 1) || 1 == d.indexOf("333") || 1 == d.indexOf("444") || 1 == d.indexOf("555") && "0" != d.substring(0, 1) || 1 == d.indexOf("666") && "0" != d.substring(0, 1) || 1 == d.indexOf("8888") && "4" != d.substring(0, 1)) && m.type.push("phone");
                            break;
                        case "number":
                            l = /^[0-9]+$/gi, f.length > 0 && !f.match(l) && m.type.push("number");
                            break;
                        case "date":
                            var b = {
                                "DD-MM-YYYY": /^(0[1-9]|1[0-9]|2[0-9]|3[01])[\-\.\/](0[1-9]|1[012])[\-\.\/][0-9]{4}$/,
                                "MM-DD-YYYY": /^(0[1-9]|1[012])[\-\.\/](0[1-9]|1[0-9]|2[0-9]|3[01])[\-\.\/][0-9]{4}$/,
                                "YYYY-MM-DD": /^[0-9]{4}[\-\.\/](0[1-9]|1[012])[\-\.\/](0[1-9]|1[0-9]|2[0-9]|3[01])$/
                            };
                            f.length > 0 && !f.match(b[i.getAttribute("data-tilda-dateformat")] || /^[0-9]{1,4}[\-\.\/][0-9]{1,2}[\-\.\/][0-9]{1,4}$/gi) && m.type.push("date");
                            break;
                        case "time":
                            l = /^[0-9]{2}[:\.][0-9]{2}$/gi, f.length > 0 && !f.match(l) && m.type.push("time");
                            break;
                        case "name":
                            l = /^([ЁёäöüÄÖÜßèéûҐґЄєІіЇїӐӑЙйК̆к̆Ӄ̆ӄ̆Ԛ̆ԛ̆Г̆г̆Ҕ̆ҕ̆ӖӗѢ̆ѣ̆ӁӂꚄ̆ꚅ̆ҊҋО̆о̆Ө̆ө̆Ꚍ̆ꚍ̆ЎўХ̆х̆Џ̆џ̆Ꚏ̆ꚏ̆Ꚇ̆ꚇ̆Ҽ̆ҽ̆Ш̆ш̆Ꚗ̆ꚗ̆Щ̆щ̆Ы̆ы̆Э̆э̆Ю̆ю̆Я̆я̆А́а́ЃѓД́д́Е́е́Ё́ёӘ́ә́З́з́И́и́І́і́Ї́ї́ЌќЛ́л́Н́н́О́о́Р́р́С́с́Т́т́У́у́Ӱ́ӱ́Ү́ү́Х́х́Ц́ц́Ы́ы́Э́э́Ӭ́ӭ́Ю́ю́Ю̈́ю̈́Я́я́Ѣ́ѣ́ҒғӺӻҒ̌ғ̌Ј̵ј̵ҞҟҜҝԞԟӨөҎҏҰұӾӿҸҹҌҍҢңҚқҒғӘәҺһІіҰұҮүӨөȺⱥꜺꜻƂƃɃƀȻȼꞒꞓƋƌĐđɆɇǤǥꞠꞡĦħƗɨƗ́ɨ́Ɨ̀ɨ̀Ɨ̂ɨ̂Ɨ̌ɨ̌Ɨ̃ɨ̃Ɨ̄ɨ̄Ɨ̈ɨ̈Ɨ̋ɨ̋Ɨ̏ɨ̏Ɨ̧ɨ̧Ɨ̧̀ɨ̧̀Ɨ̧̂ɨ̧̂Ɨ̧̌ɨ̧̌ᵼɈɉɟɟ̟ʄʄ̊ʄ̥K̵k̵ꝀꝁꝂꝃꝄꝅꞢꞣŁłł̓Ł̣ł̣ᴌȽƚⱠⱡꝈꝉƛƛ̓ꞤꞥꝊꝋØøǾǿØ̀ø̀Ø̂øØ̌ø̌Ø̄ø̄Ø̃ø̃Ø̨ø̨Ø᷎ø᷎ᴓⱣᵽꝐꝑꝖꝗꝘꝙɌɍꞦꞧꞨꞩẜẝŦŧȾⱦᵺꝤꝥꝦꝧɄʉɄ́ʉ́Ʉ̀ʉ̀Ʉ̂ʉ̂Ʉ̌ʉ̌Ʉ̄ʉ̄Ʉ̃ʉ̃Ʉ̃́ʉ̃́Ʉ̈ʉ̈ʉ̞ᵾU̸u̸ᵿꝞꝟw̸ɎɏƵƶA-Za-z\u00C0\u00C0-\u00C3\u00C8-\u00CA\u00CC\u00CD\u00D2-\u00D9\u00DA\u00DD\u00E0-\u00E3\u00E8\u00E9\u00EA\u00EC\u00ED\u00F2-\u00F5\u00F9\u00FA\u00FD\u0102\u0103\u0110\u0111\u0128\u0129\u0168\u0169\u01A0\u01A1\u01AF\u01B0\u1EA0\u1EA1-\u1EF9\u0027\u2019\u0300-\u03FF\u0400-\u04FF\u0500-\u05FF\u0600-\u06FF\u3040-\u30FF\u0041-\u007A\u00C0-\u02B8\uFB1D-\uFB1F\uFB2A-\uFB4E\u0E00-\u0E7F\u10A0-\u10FF\u3040-\u309F\u30A0-\u30FF\u2E80-\u2FD5\u3190-\u319f\u3400-\u4DBF\u4E00-\u9FCC\uF900-\uFAAD]{1,})([ЁёäöüÄÖÜßèéûҐґЄєІіЇїӐӑЙйК̆к̆Ӄ̆ӄ̆Ԛ̆ԛ̆Г̆г̆Ҕ̆ҕ̆ӖӗѢ̆ѣ̆ӁӂꚄ̆ꚅ̆ҊҋО̆о̆Ө̆ө̆Ꚍ̆ꚍ̆ЎўХ̆х̆Џ̆џ̆Ꚏ̆ꚏ̆Ꚇ̆ꚇ̆Ҽ̆ҽ̆Ш̆ш̆Ꚗ̆ꚗ̆Щ̆щ̆Ы̆ы̆Э̆э̆Ю̆ю̆Я̆я̆А́а́ЃѓД́д́Е́е́Ё́ёӘ́ә́З́з́И́и́І́і́Ї́ї́ЌќЛ́л́Н́н́О́о́Р́р́С́с́Т́т́У́у́Ӱ́ӱ́Ү́ү́Х́х́Ц́ц́Ы́ы́Э́э́Ӭ́ӭ́Ю́ю́Ю̈́ю̈́Я́я́Ѣ́ѣ́ҒғӺӻҒ̌ғ̌Ј̵ј̵ҞҟҜҝԞԟӨөҎҏҰұӾӿҸҹҌҍҢңҚқҒғӘәҺһІіҰұҮүӨөȺⱥꜺꜻƂƃɃƀȻȼꞒꞓƋƌĐđɆɇǤǥꞠꞡĦħƗɨƗ́ɨ́Ɨ̀ɨ̀Ɨ̂ɨ̂Ɨ̌ɨ̌Ɨ̃ɨ̃Ɨ̄ɨ̄Ɨ̈ɨ̈Ɨ̋ɨ̋Ɨ̏ɨ̏Ɨ̧ɨ̧Ɨ̧̀ɨ̧̀Ɨ̧̂ɨ̧̂Ɨ̧̌ɨ̧̌ᵼɈɉɟɟ̟ʄʄ̊ʄ̥K̵k̵ꝀꝁꝂꝃꝄꝅꞢꞣŁłł̓Ł̣ł̣ᴌȽƚⱠⱡꝈꝉƛƛ̓ꞤꞥꝊꝋØøǾǿØ̀ø̀Ø̂øØ̌ø̌Ø̄ø̄Ø̃ø̃Ø̨ø̨Ø᷎ø᷎ᴓⱣᵽꝐꝑꝖꝗꝘꝙɌɍꞦꞧꞨꞩẜẝŦŧȾⱦᵺꝤꝥꝦꝧɄʉɄ́ʉ́Ʉ̀ʉ̀Ʉ̂ʉ̂Ʉ̌ʉ̌Ʉ̄ʉ̄Ʉ̃ʉ̃Ʉ̃́ʉ̃́Ʉ̈ʉ̈ʉ̞ᵾU̸u̸ᵿꝞꝟw̸ɎɏƵƶA-Za-z\u00C0\u00C0-\u00C3\u00C8-\u00CA\u00CC\u00CD\u00D2-\u00D9\u00DA\u00DD\u00E0-\u00E3\u00E8\u00E9\u00EA\u00EC\u00ED\u00F2-\u00F5\u00F9\u00FA\u00FD\u0102\u0103\u0110\u0111\u0128\u0129\u0168\u0169\u01A0\u01A1\u01AF\u01B0\u1EA0\u1EA1-\u1EF9\u0041-\u007A\u00C0-\u02B8\u0300-\u03FF\u0400-\u04FF\u0500-\u05FF\u0600-\u06FF\u3040-\u30FF\uFB1D-\uFB1F\uFB2A-\uFB4E\u0E00-\u0E7F\u10A0-\u10FF\u3040-\u309F\u30A0-\u30FF\u2E80-\u2FD5\u3190-\u319f\u3400-\u4DBF\u4E00-\u9FCC\uF900-\uFAAD\-\'\‘\s\.]{0,})$/gi, p.length > 0 && !p.match(l) && m.type.push("name");
                            break;
                        case "nameeng":
                            l = /^([A-Za-z\s]{1,}((\-)?[A-Za-z\.\s](\')?){0,})*$/i, p.length > 0 && !p.match(l) && m.type.push("nameeng");
                            break;
                        case "namerus":
                            l = /^([А-Яа-яЁё\s]{1,}((\-)?[А-Яа-яЁё\.\s](\')?){0,})*$/i, p.length > 0 && !p.match(l) && m.type.push("namerus");
                            break;
                        case "string":
                            l = /^[A-Za-zА-Яа-я0-9ЁёЁёäöüÄÖÜßèéûӐӑЙйК̆к̆Ӄ̆ӄ̆Ԛ̆ԛ̆Г̆г̆Ҕ̆ҕ̆ӖӗѢ̆ѣ̆ӁӂꚄ̆ꚅ̆ҊҋО̆о̆Ө̆ө̆Ꚍ̆ꚍ̆ЎўХ̆х̆Џ̆џ̆Ꚏ̆ꚏ̆Ꚇ̆ꚇ̆Ҽ̆ҽ̆Ш̆ш̆Ꚗ̆ꚗ̆Щ̆щ̆Ы̆ы̆Э̆э̆Ю̆ю̆Я̆я̆А́а́ЃѓД́д́Е́е́Ё́ёӘ́ә́З́з́И́и́І́і́Ї́ї́ЌќЛ́л́Н́н́О́о́Р́р́С́с́Т́т́У́у́Ӱ́ӱ́Ү́ү́Х́х́Ц́ц́Ы́ы́Э́э́Ӭ́ӭ́Ю́ю́Ю̈́ю̈́Я́я́Ѣ́ѣ́ҒғӺӻҒ̌ғ̌Ј̵ј̵ҞҟҜҝԞԟӨөҎҏҰұӾӿҸҹҌҍҢңҚқҒғӘәҺһІіҰұҮүӨөȺⱥꜺꜻƂƃɃƀȻȼꞒꞓƋƌĐđɆɇǤǥꞠꞡĦħƗɨƗ́ɨ́Ɨ̀ɨ̀Ɨ̂ɨ̂Ɨ̌ɨ̌Ɨ̃ɨ̃Ɨ̄ɨ̄Ɨ̈ɨ̈Ɨ̋ɨ̋Ɨ̏ɨ̏Ɨ̧ɨ̧Ɨ̧̀ɨ̧̀Ɨ̧̂ɨ̧̂Ɨ̧̌ɨ̧̌ᵼɈɉɟɟ̟ʄʄ̊ʄ̥K̵k̵ꝀꝁꝂꝃꝄꝅꞢꞣŁłł̓Ł̣ł̣ᴌȽƚⱠⱡꝈꝉƛƛ̓ꞤꞥꝊꝋØøǾǿØ̀ø̀Ø̂øØ̌ø̌Ø̄ø̄Ø̃ø̃Ø̨ø̨Ø᷎ø᷎ᴓⱣᵽꝐꝑꝖꝗꝘꝙɌɍꞦꞧꞨꞩẜẝŦŧȾⱦᵺꝤꝥꝦꝧɄʉɄ́ʉ́Ʉ̀ʉ̀Ʉ̂ʉ̂Ʉ̌ʉ̌Ʉ̄ʉ̄Ʉ̃ʉ̃Ʉ̃́ʉ̃́Ʉ̈ʉ̈ʉ̞ᵾU̸u̸ᵿꝞꝟw̸ɎɏƵƶ\u0041-\u007A\u00C0-\u02B8\u0300-\u03FF\u0400-\u04FF\u0500-\u05FF\u0600-\u06FF\u3040-\u30FF\uFB1D-\uFB1F\uFB2A-\uFB4E\u0E00-\u0E7F\u10A0-\u10FF\u3040-\u309F\u30A0-\u30FF\u2E80-\u2FD5\u3190-\u319f\u3400-\u4DBF\u4E00-\u9FCC\uF900-\uFAAD,\.:;\"\'\`\-\_\+\?\!\%\$\@\*\&\^\s]$/i, p.length > 0 && !p.match(l) && m.type.push("string");
                            break;
                        case "chosevalue":
                            var _;
                            "true" === i.getAttribute("data-option-selected") || m.type.push("chosevalue");
                            break;
                        case "promocode":
                            !("y" === v && f.length > 0 && window.tcart) || window.tcart.promocode && window.tcart.prodamount_discountsum || m.type.push("promocode");
                            break;
                        case "deliveryreq":
                            m.type.push("deliveryreq")
                    }
                    c > 0 && p.length > 0 && p.length < c && m.type.push("minlength"), u > 0 && p.length > 0 && p.length > u && m.type.push("maxlength")
                }
                m.type && m.type.length > 0 && (r[r.length] = m)
            }
            if ("y" === v) {
                var S = void 0 !== window.tcart_minorder && window.tcart_minorder > 0,
                    F = void 0 !== window.tcart_mincntorder && window.tcart_mincntorder > 0,
                    m, m;
                if (S)
                    if (window.tcart.prodamount < window.tcart_minorder)(m = {
                        obj: {},
                        type: []
                    }).type.push("minorder"), r.push(m);
                if (F)
                    if (window.tcart.total < window.tcart_mincntorder)(m = {
                        obj: {},
                        type: []
                    }).type.push("minquantity"), r.push(m)
            }
            return o && 0 == r.length && (r = [{
                obj: "none",
                type: ["emptyfill"]
            }]), r
        }, window.tildaForm.hideErrors = function (e) {
            if ("object" != typeof e || 0 !== e.length) {
                e instanceof Element || (e = e[0]);
                for (var t = e.querySelectorAll(".js-errorbox-all"), r = e.querySelectorAll(".js-rule-error"), o = e.querySelectorAll(".js-error-rule-all"), a = e.querySelectorAll(".js-successbox"), i = e.querySelectorAll(".js-error-control-box"), n = e.querySelectorAll(".js-error-control-box .t-input-error"), s = document.getElementById("tilda-popup-for-error"), l = 0; l < t.length; l++) t[l].style.display = "none";
                for (var l = 0; l < r.length; l++) r[l].style.display = "none";
                for (var l = 0; l < o.length; l++) o[l].innerHTML = "";
                for (var l = 0; l < a.length; l++) a[l].style.display = "none";
                for (var l = 0; l < n.length; l++) n[l].innerHTML = "";
                for (var l = 0; l < i.length; l++) t_removeClass(i[l], "js-error-control-box");
                t_removeClass(e, "js-send-form-error"), t_removeClass(e, "js-send-form-success"), s && t_fadeOut(s)
            }
        }, window.tildaForm.showErrorInPopup = function (e, t) {
            if (e instanceof Element || (e = e[0]), !t || 0 === t.length) return !1;
            var r = e.getAttribute("id"),
                o = e.getAttribute("data-inputbox");
            o || (o = ".blockinput");
            var a = "",
                i = !1,
                n = !0,
                s = "",
                l = "",
                d = "",
                c = "",
                u = document.getElementById("tilda-popup-for-error");
            u || (document.body.insertAdjacentHTML("beforeend", '<div id="tilda-popup-for-error" class="js-form-popup-errorbox tn-form__errorbox-popup" style="display: none;"> <div class="t-form__errorbox-text t-text t-text_xs"> error </div> <div class="tn-form__errorbox-close js-errorbox-close"> <div class="tn-form__errorbox-close-line tn-form__errorbox-close-line-left"></div> <div class="tn-form__errorbox-close-line tn-form__errorbox-close-line-right"></div> </div> </div>'), t_addEventListener(u = document.getElementById("tilda-popup-for-error"), "click", (function (e) {
                var t, r;
                if (!!((e = e || window.event).target || e.srcElement).closest(".js-errorbox-close")) return e.preventDefault ? e.preventDefault() : e.returnValue = !1, t_fadeOut(u), !1
            })));
            for (var m = 0; m < t.length; m++)
                if (t[m] && t[m].obj) {
                    if (0 === m && "none" === t[m].obj) {
                        c = '<p class="t-form__errorbox-item">' + t_form_dict("emptyfill") + "</p>";
                        break
                    }
                    var p = t[m].obj;
                    p instanceof Element || (p = p[0]), p && (a = p.closest(o)), a && (l = a.querySelectorAll(".t-input-error"), t_addClass(a, "js-error-control-box"), l.length > 0 && (i = !0));
                    for (var f = 0; f < t[m].type.length; f++) {
                        var w = t[m].type[f],
                            y = t_form_dict(w);
                        if (d = "", (s = e.querySelector(".js-rule-error-" + w)) ? s.textContent && s.innerText || !y ? (d = s.textContent || s.innerText, -1 === c.indexOf(y) && (c = c + '<p class="t-form__errorbox-item">' + d + "</p>")) : -1 === c.indexOf(y) && (c = c + '<p class="t-form__errorbox-item">' + y + "</p>") : y && -1 === c.indexOf(y) && (c = c + '<p class="t-form__errorbox-item">' + y + "</p>"), i && (d || (t_form_dict(w + "field") ? d = t_form_dict(w + "field") : y && (d = y)), d && a)) {
                            l = a.querySelectorAll(".t-input-error");
                            for (var v = 0; v < l.length; v++) l[v].innerHTML = d, t_fadeIn(l[v])
                        }
                    }
                } if (c) {
                u.querySelector(".t-form__errorbox-text").innerHTML = c;
                for (var g = u.querySelectorAll(".t-form__errorbox-item"), m = 0; m < g.length; m++) g[m].style.display = "block";
                t_fadeIn(u)
            }

            function h(e) {
                var t;
                if ("INPUT" === ((e = e || window.event).target || e.srcElement).tagName) {
                    var o = b.querySelectorAll("form .t-input-error");
                    t_fadeOut(u);
                    for (var a = 0; a < o.length; a++) o[a].innerHTML = "", t_fadeOut(o[a]);
                    window.errorTimerID && (window.clearTimeout(window.errorTimerID), window.errorTimerID = 0), window.isInitEventsZB[r] = !0
                }
            }
            if (window.errorTimerID && window.clearTimeout(window.errorTimerID), window.errorTimerID = window.setTimeout((function () {
                    t_fadeOut(u), l = e.querySelectorAll(".t-input-error");
                    for (var t = 0; t < l.length; t++) l[t].innerHTML = "", t_fadeOut(l[t]);
                    window.errorTimerID = 0
                }), 1e4), !window.isInitEventsZB[r]) {
                var b = e.closest(".r"),
                    _ = "focus";
                document.addEventListener || (_ = "focusin"), t_removeEventListener(b, _, h), t_addEventListener(b, _, h, !0), t_removeEventListener(b, "change", h), t_addEventListener(b, "change", h, !0)
            }
            return t_triggerEvent(e, "tildaform:aftererror"), !0
        }, window.tildaForm.showErrors = function (e, t) {
            if (e instanceof Element || (e = e[0]), !t || 0 == t.length) return !1;
            if ("y" === e.getAttribute("data-error-popup")) return tildaForm.showErrorInPopup(e, t);
            var r = e.getAttribute("data-inputbox");
            r || (r = ".blockinput");
            for (var o = "", a = !1, i = !0, n = "", s = "", l = "", d = 0; d < t.length; d++)
                if (t[d] && t[d].obj) {
                    if (0 === d && "none" === t[d].obj) {
                        n = e.querySelectorAll(".js-rule-error-all");
                        for (var c = 0; c < n.length; c++) n[c].innerHTML = t_form_dict("emptyfill"), n[c].style.display = "block";
                        break
                    }
                    var u = t[d].obj;
                    u instanceof Element || (u = u[0]), u && (o = u.closest(r)), o && (s = o.querySelectorAll(".t-input-error"), t_addClass(o, "js-error-control-box"), s.length > 0 && (a = !0));
                    for (var c = 0; c < t[d].type.length; c++) {
                        var m = t[d].type[c];
                        if (l = "", (n = e.querySelectorAll(".js-rule-error-" + m)).length > 0)
                            for (var p = 0; p < n.length; p++) n[p].getAttribute("data-rule-filled") ? n[p].style.display = "block" : (n[p].textContent && n[p].innerText || !t_form_dict(m) ? l = n[0].textContent || n[0].innerText : n[p].innerHTML = t_form_dict(m), n[p].style.display = "block");
                        else if (t_form_dict(m) && (n = e.querySelectorAll(".js-rule-error-all")).length > 0)
                            for (var p = 0; p < n.length; p++) n[p].innerHTML = t_form_dict(m), n[p].style.display = "block";
                        if (a && (l || (t_form_dict(m + "field") ? l = t_form_dict(m + "field") : t_form_dict(m) && (l = t_form_dict(m))), l && o)) {
                            s = o.querySelectorAll(".t-input-error");
                            for (var p = 0; p < s.length; p++) s[p].innerHTML = l
                        }
                    }
                } for (var f = e.querySelectorAll(".js-errorbox-all"), d = 0; d < f.length; d++) f[d].style.display = "block";
            return t_triggerEvent(e, "tildaform:aftererror"), !0
        }, window.tildaForm.addTildaCaptcha = function (e, t) {
            e instanceof Element || (e = e[0]);
            var r = document.getElementById("tildaformcaptchabox"),
                o = document.getElementById("js-tildaspec-captcha"),
                a;
            r && t_removeEl(r), o && t_removeEl(o), e.insertAdjacentHTML("beforeend", '<input type="hidden" name="tildaspec-tildacaptcha" id="js-tildaspec-captcha">');
            try {
                a = (new Date).getTime() + "=" + parseInt(8 * Math.random())
            } catch (e) {
                a = "rnd=" + parseInt(8 * Math.random())
            }
            var i = '<div id="tildaformcaptchabox" style="z-index: 99999999999; position:fixed; text-align: center; vertical-align: middle; top: 0px; left:0px; bottom: 0px; right: 0px; background: rgba(255,255,255,0.97);"><iframe id="captchaIframeBox" src="../https@/' + window.tildaForm.endpoint + "/procces/captcha/?tildaspec-formid=" + e.getAttribute("id") + "&tildaspec-formskey=" + t + "&" + a + '" frameborder="0" width="100%" height="100%"></iframe></div>';
            document.body.insertAdjacentHTML("beforeend", i), window.removeEventListener("message", checkVerifyTildaCaptcha), window.addEventListener("message", checkVerifyTildaCaptcha)
        }, window.tildaForm.addMebersInfoToForm = function (e) {
            e instanceof Element || (e = e[0]);
            try {
                window.tildaForm.tildamember = {};
                var t = e.querySelector(".js-tilda-mauserinfo");
                if (t && t_removeEl(t), !window.mauser || !window.mauser.code || !window.mauser.email) return !1;
                window.mauser.name && (window.tildaForm.tildamember.name = window.mauser.name), window.tildaForm.tildamember.email = window.mauser.email, window.tildaForm.tildamember.code = window.mauser.code
            } catch (e) {
                return console.log("addMebersInfoToForm exception: " + e), !1
            }
            return !0
        }, window.tildaForm.addPaymentInfoToForm = function (e) {
            e instanceof Element || (e = e[0]);
            var t = document.getElementById("allrecords"),
                r = e.querySelector(".js-tilda-payment");
            r && t_removeEl(r);
            var o = "",
                a = 0;
            window.tildaForm.tildapayment = {}, window.tildaForm.arProductsForStat = [], window.tildaForm.orderIdForStat = "", window.tildaForm.amountForStat = 0, window.tildaForm.currencyForStat = "";
            var i = t.getAttribute("data-tilda-currency") || "";
            if (!i) {
                var n = document.querySelector(".t706");
                n && (i = n.getAttribute("data-project-currency-code") || "")
            }
            i ? (window.tildaForm.currencyForStat = i, window.tildaForm.tildapayment.currency = i) : window.tcart.currency && (window.tildaForm.currencyForStat = window.tcart.currency, window.tildaForm.tildapayment.currency = window.tcart.currency);
            var s = document.querySelector(".t-radio_delivery:checked");
            if (!window.tcart.delivery && s && parseInt(s.getAttribute("data-delivery-price")) > 0) try {
                return window.tildaForm.tildapayment = !1, window.location.reload(), !1
            } catch (e) {}
            window.tildaForm.amountForStat = window.tcart.amount, window.tildaForm.tildapayment.amount = window.tcart.amount, window.tcart.system ? window.tildaForm.tildapayment.system = window.tcart.system : window.tildaForm.tildapayment.system = "auto", window.tcart.promocode && window.tcart.promocode.promocode && (window.tildaForm.tildapayment.promocode = window.tcart.promocode.promocode, window.tcart.prodamount_discountsum && parseFloat(window.tcart.prodamount_discountsum) > 0 ? (window.tildaForm.tildapayment.discount = window.tcart.prodamount_discountsum, a = window.tcart.prodamount_discountsum) : window.tcart.amount_discountsum && parseFloat(window.tcart.amount_discountsum) > 0 && (window.tildaForm.tildapayment.discount = window.tcart.amount_discountsum, a = window.tcart.amount_discountsum), window.tcart.prodamount_withdiscount && parseFloat(window.tcart.prodamount_withdiscount) > 0 && (window.tildaForm.tildapayment.prodamount_withdiscount = window.tcart.prodamount_withdiscount), window.tcart.amount_withoutdiscount && parseFloat(window.tcart.amount_withoutdiscount) > 0 && (window.tildaForm.tildapayment.amount_withoutdiscount = window.tcart.amount_withoutdiscount)), window.tcart.prodamount && parseFloat(window.tcart.prodamount) > 0 && (window.tildaForm.tildapayment.prodamount = window.tcart.prodamount);
            for (var l = [], d = window.tcart.products, c = 0; c < d.length; c++) t_isEmptyObject(d[c]) || "yes" === d[c].deleted || l.push(d[c]);
            window.tcart.products = l;
            var u, m = (new Date).getTimezoneOffset();
            window.tildaForm.tildapayment.timezoneoffset = m;
            var p = {},
                f = "",
                w = 0;
            window.tcart.products && window.tcart.products.length > 0 && (w = window.tcart.products.length), window.tildaForm.tildapayment.products = [];
            for (var c = 0; c < w; c++) {
                var o = window.tcart.products[c];
                for (var y in p = {}, f = "", window.tildaForm.tildapayment.products[c] = {}, o)
                    if ("function" != typeof o[y])
                        if ("options" === y)
                            for (var v in window.tildaForm.tildapayment.products[c][y] = {}, o[y]) window.tildaForm.tildapayment.products[c][y][v] || (window.tildaForm.tildapayment.products[c][y][v] = {}), o[y][v].option && (window.tildaForm.tildapayment.products[c][y][v].option = o[y][v].option), o[y][v].price && o[y][v].price > 0 && (window.tildaForm.tildapayment.products[c][y][v].price = o[y][v].price), o[y][v].variant && (window.tildaForm.tildapayment.products[c][y][v].variant = o[y][v].variant), o[y][v].option && o[y][v].variant && (f && (f += ", "), f = f + o[y][v].option + ":" + o[y][v].variant);
                        else window.tildaForm.tildapayment.products[c][y] = o[y];
                o.sku ? p.id = o.sku : o.uid && (p.id = o.uid), p.name = o.name, o.price ? (p.price = o.price, p.quantity = parseInt(o.amount / o.price)) : o.quantity && o.quantity > 1 ? (p.price = o.amount / o.quantity, p.quantity = o.quantity) : (p.price = o.amount, p.quantity = 1), p.name = o.name, f && (p.name = p.name + "(" + f + ")"), o.sku && (p.sku = o.sku), o.uid && (p.uid = o.uid), window.tildaForm.arProductsForStat.push(p)
            }
            var g = 0;
            window.tcart.delivery && window.tcart.delivery.name && (window.tildaForm.tildapayment.delivery = {
                name: window.tcart.delivery.name
            }, window.tcart.delivery && window.tcart.delivery.price >= 0 && (g = window.tcart.delivery.price, window.tildaForm.tildapayment.delivery.price = window.tcart.delivery.price, window.tcart.prodamount > 0 && window.tcart.delivery.freedl && window.tcart.delivery.freedl > 0 && (window.tildaForm.tildapayment.delivery.freedl = window.tcart.delivery.freedl, window.tcart.prodamount - a >= window.tcart.delivery.freedl && (g = 0)), p = {
                name: window.tcart.delivery.name,
                price: g,
                quantity: 1,
                id: "delivery"
            }, window.tildaForm.arProductsForStat.push(p)));
            try {
                for (var h = ["city", "street", "pickup-name", "pickup-address", "pickup-id", "house", "entrance", "floor", "aptoffice", "phone", "entrancecode", "comment", "service-id", "hash", "postalcode", "country", "userinitials", "onelineaddress"], c = 0; c < h.length; c++) {
                    var b = h[c];
                    window.tcart.delivery && window.tcart.delivery[b] && (window.tildaForm.tildapayment.delivery[b] = window.tcart.delivery[b])
                }
            } catch (e) {
                console.log(e)
            }
        }, window.tildaForm.clearTCart = function (e) {
            if (e instanceof Element || (e = e[0]), "y" === e.getAttribute("data-formcart")) {
                if (window.clearTCart = !0, window.tcart = {
                        amount: 0,
                        currency: "",
                        system: "",
                        products: []
                    }, window.tcart.system = "none", "object" == typeof localStorage) try {
                    localStorage.removeItem("tcart")
                } catch (e) {
                    console.log("Your web browser does not support localStorage.")
                }
                try {
                    delete window.tcart, tcart__loadLocalObj()
                } catch (e) {}
                window.tcart_success = "yes"
            }
        }, window.tildaForm.payment = function (form, objNext) {
            form instanceof Element || (form = form[0]);
            var successBox = form.querySelector(".js-successbox");
            if ("y" !== form.getAttribute("data-formpaymentoff")) {
                if (successBox) {
                    var successBoxText = successBox.textContent || successBox.innerText;
                    successBoxText && (form.tildaSuccessMessage = successBoxText), t_form_dict("successorder") && (successBox.innerHTML = t_form_dict("successorder")), successBox.style.display = "block"
                }
                if (t_addClass(form, "js-send-form-success"), "link" === objNext.type) return window.tildaForm.clearTCart(form), objNext.message && successBox && (successBox.innerHTML = objNext.message, successBox.style.display = "block"), window.location.href = objNext.value, !0;
                if ("form" === objNext.type) {
                    var paymentForm = document.getElementById("js-tilda-payment-formid"),
                        strHtml = "",
                        valueKey = "";
                    for (var key in paymentForm && t_removeEl(paymentForm), strHtml = '<form id="js-tilda-payment-formid" action="' + objNext.value.action + '" method="post"  style="position: absolue; opacity: 0; width: 1px; height: 1px; left: -5000px;">', objNext.value.action = "", objNext.value) valueKey = objNext.value[key], "function" != typeof valueKey && valueKey && (strHtml += "<input type='hidden' name='" + key + "' value='" + valueKey + "' >");
                    strHtml += "</form>", document.body.insertAdjacentHTML("beforeend", strHtml), paymentForm = document.getElementById("js-tilda-payment-formid"), window.tildaForm.clearTCart(form), paymentForm.getAttribute("action") ? paymentForm.submit() : setTimeout((function () {
                        paymentForm.submit()
                    }), 200)
                } else {
                    if ("function" === objNext.type) {
                        var arrArgs = objNext.value.args;
                        return objNext.value.functioncode ? window.tildaForm.paysystemRun(objNext.value.script, objNext.value.sysname, form, objNext.value.functioncode, arrArgs) : eval(objNext.value.name + "($(form), arrArgs);"), !1
                    }
                    window.tildaForm.clearTCart(form), "text" === objNext.type && objNext.message && successBox && (successBox.innerHTML = objNext.message, successBox.style.display = "block")
                }
            } else window.tildaForm.clearTCart(form)
        }, window.tildaForm.paysystemScriptLoad = function (e, t) {
            if (!t || !e || "http" != e.substring(0, 4)) return console.log("Wrong script parameters."), !1;
            if (window.scriptSysPayment || (window.scriptSysPayment = {}), !window.scriptSysPayment[t] || !0 !== window.scriptSysPayment[t]) {
                var r = document.createElement("script");
                r.type = "text/javascript", r.src = e, document.body.appendChild(r), window.scriptSysPayment[t] = !0
            }
        }, window.tildaForm.paysystemRun = function (linkScript, systemName, form, functionCode, objArgs) {
            if (form instanceof Element || (form = form[0]), window.scriptSysPayment || (window.scriptSysPayment = {}), !window.scriptSysPayment[systemName] || !0 !== window.scriptSysPayment[systemName]) return window.tildaForm.paysystemScriptLoad(linkScript, systemName), window.setTimeout((function () {
                window.tildaForm.paysystemRun(linkScript, systemName, form, functionCode, objArgs)
            }), 200), !1;
            var script = linkScript,
                sysname = systemName,
                $jform = $(form),
                functioncode = functionCode,
                arArgs = objArgs;
            eval(functionCode)
        }, window.tildaForm.paysystemSuccess = function (e, t) {
            e instanceof Element || (e = e[0]), window.tildaForm.clearTCart(e);
            var r = document.getElementById("allrecords"),
                o = e.getAttribute("id"),
                a = e.querySelector(".js-successbox"),
                i = "tilda/" + o + "payment/default.htm",
                n = "Pay order in form " + o,
                s = t.amount,
                l = t.description,
                d = "";
            if (window.Tilda && "function" == typeof window.Tilda.sendEventToStatistics) {
                var c = r.getAttribute("data-tilda-currency") || "";
                if (!c) {
                    var u = document.querySelector(".t706");
                    u && (c = u.getAttribute("data-project-currency-code") || "")
                }
                c || r.setAttribute("data-tilda-currency", t.currency), window.Tilda.sendEventToStatistics(i, n, l, s)
            }
            e.tildaSuccessMessage && (d = e.tildaSuccessMessage), t.successurl && window.setTimeout((function () {
                window.location.href = t.successurl
            }), 300), a.innerHTML = d || "", e.tildaSuccessMessage = "";
            var m = e.getAttribute("data-success-callback");
            window.tildaForm.successEnd(e, t.successurl, m), t_triggerEvent(e, "tildaform:aftersuccess")
        }, window.tildaForm.stripeLoad = function () {
            if (!0 !== window.stripeapiiscalled) {
                var e = document.createElement("script");
                e.type = "text/javascript", e.src = "../https@checkout.stripe.com/checkout.js", document.body.appendChild(e), window.stripeapiiscalled = !0
            }
        }, window.tildaForm.stripePay = function (e, t) {
            if (e instanceof Element || (e = e[0]), !0 !== window.stripeapiiscalled) return window.tildaForm.stripeLoad(), window.setTimeout((function () {
                window.tildaForm.stripePay(e, t)
            }), 200), !1;
            var r = document.getElementById("allrecords"),
                o = t.companyname,
                a = t.companylogo;
            if (o || (o = window.location.host), !window.stripehandler) {
                if ("object" != typeof window.StripeCheckout) return window.setTimeout((function () {
                    window.tildaForm.stripePay(e, t)
                }), 200), !1;
                var i = {
                    key: t.accountid,
                    image: a,
                    name: o,
                    locale: "auto"
                };
                t.zipCode && 1 === t.zipCode && (i.zipCode = !0), t.billingAddress && 1 === t.billingAddress && (i.billingAddress = !0), t.shipping && 1 === t.shipping && (i.shippingAddress = !0), window.stripehandler = window.StripeCheckout.configure(i), t_addEventListener(window, "popstate", (function () {
                    window.stripehandler.close()
                }))
            }
            window.tildaForm.orderIdForStat = t.invoiceid;
            var n = 100;
            t.multiple && t.multiple > 0 && (n = parseInt(t.multiple));
            var s = e.getAttribute("id");
            window.stripehandler.open({
                name: o,
                image: a,
                description: t.description,
                amount: parseInt((parseFloat(t.amount) * n).toFixed()),
                currency: t.currency,
                shippingAddress: "1" == t.shipping,
                email:t.email > "" ? t.email : "",
                token: function (o) {
                    if (o && o.id) {
                        var a = [{
                            name: "projectid",
                            value: t.projectid
                        }, {
                            name: "invoiceid",
                            value: t.invoiceid
                        }, {
                            name: "token",
                            value: o.id
                        }, {
                            name: "email",
                            value: o.email
                        }, {
                            name: "currency",
                            value: t.currency
                        }, {
                            name: "amount",
                            value: parseInt((parseFloat(t.amount) * n).toFixed())
                        }];
                        a = t_formData(a);
                        var i = new XMLHttpRequest;
                        i.open("POST", "../https@/" + window.tildaForm.endpoint + "payment/stripe/default.htm", !0), i.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8"), i.setRequestHeader("Accept", "application/json, text/javascript, */*; q=0.01"), i.onreadystatechange = function () {
                            if (4 === i.readyState && i.status >= 200 && i.status < 400) {
                                var o = i.responseText,
                                    a;
                                if (o)
                                    if ("object" == typeof JSON.parse(o)) {
                                        window.tildaForm.clearTCart(e);
                                        var n = "tilda/" + s + "payment/default.htm",
                                            l = "Pay order in form " + s,
                                            d = t.amount,
                                            c = t.description;
                                        if (window.Tilda && "function" == typeof window.Tilda.sendEventToStatistics) {
                                            var u = r.getAttribute("data-tilda-currency") || "";
                                            if (!u) {
                                                var m = document.querySelector(".t706");
                                                m && (u = m.getAttribute("data-project-currency-code") || "")
                                            }
                                            u || r.setAttribute("data-tilda-currency", t.currency), window.Tilda.sendEventToStatistics(n, l, c, d)
                                        }
                                        e.tildaSuccessMessage && (dataSuccessMessage = e.tildaSuccessMessage), t.successurl && window.setTimeout((function () {
                                            window.location.href = t.successurl
                                        }), 300), dataSuccessMessage ? successBox.innerHTML = dataSuccessMessage : successBox.innerHTML = "", e.tildaSuccessMessage = "";
                                        var p = e.getAttribute("data-success-callback");
                                        window.tildaForm.successEnd(e, t.successurl, p), t_triggerEvent(e, "tildaform:aftersuccess")
                                    }
                            }
                        }, i.send(a)
                    }
                }
            })
        }, window.tildaForm.cloudpaymentLoad = function () {
            if (!0 !== window.cloudpaymentsapiiscalled) {
                var e = document.createElement("script");
                e.type = "text/javascript", e.src = "../https@widget.cloudpayments.ru/bundles/cloudpayments.js", document.body.appendChild(e), window.cloudpaymentsapiiscalled = !0
            }
        }, window.tildaForm.cloudpaymentPay = function (e, t) {
            if (e instanceof Element || (e = e[0]), !0 !== window.cloudpaymentsapiiscalled) return window.tildaForm.cloudpaymentLoad(), window.setTimeout((function () {
                window.tildaForm.cloudpaymentPay(e, t)
            }), 200), !1;
            var r = document.getElementById("allrecords"),
                o = e.getAttribute("id"),
                a = e.querySelector(".js-successbox"),
                i = "",
                n = t.currency,
                s = t.language,
                l = {};
            if (s || (s = "RUB" == n || "BYR" == n || "BYN" == n || "RUR" == n ? "ru-RU" : "UAH" == n ? "uk" : "en-US"), !window.cloudpaymentshandler) {
                if ("object" != typeof window.cp) return window.setTimeout((function () {
                    window.tildaForm.cloudpaymentPay(e, t)
                }), 200), !1;
                l = {
                    language: s
                }, t.applePaySupport && "off" === t.applePaySupport && (l.applePaySupport = !1), t.googlePaySupport && "off" === t.googlePaySupport && (l.googlePaySupport = !1), window.cloudpaymentshandler = new cp.CloudPayments(l)
            }
            var d = {};
            d.projectid = t.projectid, t.cloudPayments && (t.cloudPayments.recurrent || t.cloudPayments.customerReceipt) && (d.cloudPayments = t.cloudPayments);
            var c = "",
                u = e.closest(".t-popup_show");
            return u || (u = e.closest(".t706__cartwin_showed")), u && (c = u.getAttribute("style"), u.style.zIndex = 100), window.tildaForm.orderIdForStat = t.invoiceId, t.skin || (t.skin = "classic"), window.cloudpaymentshandler.charge({
                publicId: t.publicId,
                description: t.description,
                amount: parseFloat(t.amount),
                currency: n,
                accountId: t.accountId,
                invoiceId: t.invoiceId,
                requireEmail: !0 === t.requireEmail,
                email: t.email,
                skin: t.skin,
                data: d
            }, (function (s) {
                window.cloudpaymentshandler = !1, u && c && u.setAttribute("style", c);
                var l = "tilda/" + o + "payment/default.htm",
                    d = "Pay order in form " + o,
                    m = t.amount,
                    p = t.description;
                r.setAttribute("data-tilda-currency", n), window.Tilda && "function" == typeof window.Tilda.sendEventToStatistics && window.Tilda.sendEventToStatistics(l, d, p, m), window.tildaForm.clearTCart(e), t.successurl && window.setTimeout((function () {
                    window.location.href = t.successurl
                }), 300), e.tildaSuccessMessage && (i = e.tildaSuccessMessage), a.innerHTML = i || "", e.tildaSuccessMessage = "";
                var f = e.getAttribute("data-success-callback");
                window.tildaForm.successEnd(e, t.successurl, f), t_triggerEvent(e, "tildaform:aftersuccess")
            }), (function (r, o) {
                if (u && c && u.setAttribute("style", c), a.style.display = "none", e.tildaSuccessMessage && (i = e.tildaSuccessMessage), a.innerHTML = i || "", e.tildaSuccessMessage = "", window.cloudpaymentshandler = !1, t.failureurl) window.location.href = t.failureurl;
                else {
                    if (u) {
                        var n = u.querySelector(".t706__cartwin-products"),
                            s = u.querySelector(".t706__cartwin-prodamount-wrap"),
                            l = u.querySelector(".t706__form-bottom-text");
                        n && (n.style.display = "block"), s && (s.style.display = "block"), l && (l.style.display = "block")
                    }
                    var d = e.querySelector(".t-form__inputsbox");
                    d && (d.style.display = "block");
                    try {
                        tcart__lockScroll()
                    } catch (e) {}
                }
            })), !1
        }
    }))
}();